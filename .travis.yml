dist: trusty
language: cpp
os:
  - linux
compiler:
  - clang
  - gcc
env:
 - EXTRA_CHECK=cppcheck
 - EXTRA_CHECK=scan-build
sudo: required
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    - llvm-toolchain-trusty-5.0
    packages:
    - g++
    - clang
    - cmake
    - cmake-data
    - libssl-dev 
    - gdb
before_install:
# - $CC --version 
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then  if [ "$CXX" = "g++" ]; then export CXX="g++" CC="gcc" EXTRA_LDFLAGS="-fuse-ld=gold"; else export CXX="clang++" CC="clang"; fi; fi
# - $CC --version
  - cmake --version
before_script:
  # First build external lib
  - ./ci/build_picotls.sh
  - if [ "$CC" == "gcc" ] && [ "$EXTRA_CHECK" == "ON" ]; then ./ci/build_cppcheck.sh; fi
  - sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
script:
  # Now build picotls examples and test
  - echo $CC
  - echo $CXX
  # if clang and Extra_check, use scan-build
  - if [ "$CC" == "clang" ] && [ "$EXTRA_CHECK" == "scan-build" ]; then scan-build cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=/usr/share/clang/scan-build/ccc-analyzer .; else cmake .; fi
  # if gcc and extra_check, use cppcheck
  - if [ "$CC" == "gcc" ] && [ "$EXTRA_CHECK" == "cppcheck" ]; then cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .; else cmake .;fi
  # cppcheck...
  - if [ "$CC" == "gcc" ] && [ "$EXTRA_CHECK" == "cppcheck" ]; then cppcheck --project=compile_commands.json; fi
  # build !
  - if [ "$CC" == "clang" ] && [ "$EXTRA_CHECK" == "scan-build" ]; then scan-build make; else make; fi
  - ulimit -c unlimited -S
  - ./picoquic_ct -n && RESULT=$?
  # Early out if the program exited successfully
  - if [[ ${RESULT} == 0 ]]; then exit 0; fi;
  - for i in $(find ./ -maxdepth 1 -name 'core*' -print); do gdb $(pwd)/picoquic_ct core* -ex "thread apply all bt" -ex "set pagination 0" -batch; done;
